{"mappings":"ACAA;;;;CAIC,EAEA,CAAA,KAGG,IAAM,EAAiB,IAAM,aAAa,OAAO,CAAC,SAC5C,EAAiB,AAAA,GAAS,aAAa,OAAO,CAAC,QAAS,GAExD,EAAoB,IAEtB,AADoB,KAKb,CAAA,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAAG,OAAS,OAA5E,EAGE,EAAW,AAAA,IACT,AAAU,SAAV,GAAoB,OAAO,UAAU,CAAC,gCAAgC,OAAO,CAC7E,SAAS,eAAe,CAAC,YAAY,CAAC,gBAAiB,QAEvD,SAAS,eAAe,CAAC,YAAY,CAAC,gBAAiB,EAE/D,EAEA,EAAS,KAET,IAAM,EAAkB,CAAC,EAAO,EAAQ,CAAA,CAAK,IACzC,IAAM,EAAgB,SAAS,aAAa,CAAC,aAE7C,GAAI,CAAC,EACD,OAGJ,IAAM,EAAoB,SAAS,aAAa,CAAC,kBAC3C,EAAkB,SAAS,aAAa,CAAC,sBACzC,EAAc,SAAS,aAAa,CAAC,CAAC,sBAAsB,EAAE,EAAM,EAAE,CAAC,EAE7E,SAAS,gBAAgB,CAAC,yBAAyB,OAAO,CAAC,AAAA,IACvD,EAAQ,SAAS,CAAC,MAAM,CAAC,UACzB,EAAQ,YAAY,CAAC,eAAgB,QACzC,GAEA,SAAS,gBAAgB,CAAC,gBAAgB,OAAO,CAAC,AAAA,IAC9C,EAAQ,SAAS,CAAC,GAAG,CAAC,SAC1B,GAEA,EAAY,aAAa,CAAC,gBAAgB,SAAS,CAAC,MAAM,CAAC,UAEvD,EAAgB,SAAS,CAAC,QAAQ,CAAC,mBACnC,EAAgB,SAAS,CAAC,MAAM,CAAC,kBAEjC,EAAgB,SAAS,CAAC,QAAQ,CAAC,gBACnC,EAAgB,SAAS,CAAC,MAAM,CAAC,eAEjC,EAAgB,SAAS,CAAC,QAAQ,CAAC,uBACnC,EAAgB,SAAS,CAAC,MAAM,CAAC,sBAErC,EAAgB,SAAS,CAAC,GAAG,CACzB,AAAU,UAAV,EAAoB,cAAgB,AAAU,SAAV,EAAmB,qBAAuB,kBAGlF,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAY,YAAY,CAAC,eAAgB,QACzC,IAAM,EAAqB,CAAC,EAAE,EAAkB,WAAW,CAAC,EAAE,EAAE,EAAY,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CACnG,EAAc,YAAY,CAAC,aAAc,GAErC,GACA,EAAc,KAAK,EAE3B,EAEA,OAAO,UAAU,CAAC,gCAAgC,gBAAgB,CAAC,SAAU,KACzE,IAAM,EAAc,GACA,CAAA,UAAhB,GAA2B,AAAgB,SAAhB,GAC3B,EAAS,IAEjB,GAEA,OAAO,gBAAgB,CAAC,mBAAoB,KACxC,EAAgB,KAEhB,SAAS,gBAAgB,CAAC,yBACrB,OAAO,CAAC,AAAA,IACL,EAAO,gBAAgB,CAAC,QAAS,KAC7B,IAAM,EAAQ,EAAO,YAAY,CAAC,uBAClC,EAAe,GACf,EAAS,GACT,EAAgB,EAAO,CAAA,EAC3B,EACJ,EACR,EACJ,CAAA","sources":["<anon>","output/assets/js/color-modes.js"],"sourcesContent":["var $c4f2242be4f6f65b$exports = {};\n/*!\n * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)\n * Copyright 2011-2023 The Bootstrap Authors\n * Licensed under the Creative Commons Attribution 3.0 Unported License.\n */ (()=>{\n    \"use strict\";\n    const getStoredTheme = ()=>localStorage.getItem(\"theme\");\n    const setStoredTheme = (theme)=>localStorage.setItem(\"theme\", theme);\n    const getPreferredTheme = ()=>{\n        const storedTheme = getStoredTheme();\n        if (storedTheme) return storedTheme;\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    };\n    const setTheme = (theme)=>{\n        if (theme === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) document.documentElement.setAttribute(\"data-bs-theme\", \"dark\");\n        else document.documentElement.setAttribute(\"data-bs-theme\", theme);\n    };\n    setTheme(getPreferredTheme());\n    const showActiveTheme = (theme, focus = false)=>{\n        const themeSwitcher = document.querySelector(\"#bd-theme\");\n        if (!themeSwitcher) return;\n        const themeSwitcherText = document.querySelector(\"#bd-theme-text\");\n        const activeThemeIcon = document.querySelector(\".theme-icon-active\");\n        const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`);\n        document.querySelectorAll(\"[data-bs-theme-value]\").forEach((element)=>{\n            element.classList.remove(\"active\");\n            element.setAttribute(\"aria-pressed\", \"false\");\n        });\n        document.querySelectorAll(\".theme-check\").forEach((element)=>{\n            element.classList.add(\"d-none\");\n        });\n        btnToActive.querySelector(\".theme-check\").classList.remove(\"d-none\");\n        if (activeThemeIcon.classList.contains(\"bi-circle-half\")) activeThemeIcon.classList.remove(\"bi-circle-half\");\n        if (activeThemeIcon.classList.contains(\"bi-sun-fill\")) activeThemeIcon.classList.remove(\"bi-sun-fill\");\n        if (activeThemeIcon.classList.contains(\"bi-moon-stars-fill\")) activeThemeIcon.classList.remove(\"bi-moon-stars-fill\");\n        activeThemeIcon.classList.add(theme === \"light\" ? \"bi-sun-fill\" : theme === \"dark\" ? \"bi-moon-stars-fill\" : \"bi-circle-half\");\n        btnToActive.classList.add(\"active\");\n        btnToActive.setAttribute(\"aria-pressed\", \"true\");\n        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;\n        themeSwitcher.setAttribute(\"aria-label\", themeSwitcherLabel);\n        if (focus) themeSwitcher.focus();\n    };\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", ()=>{\n        const storedTheme = getStoredTheme();\n        if (storedTheme !== \"light\" && storedTheme !== \"dark\") setTheme(getPreferredTheme());\n    });\n    window.addEventListener(\"DOMContentLoaded\", ()=>{\n        showActiveTheme(getPreferredTheme());\n        document.querySelectorAll(\"[data-bs-theme-value]\").forEach((toggle)=>{\n            toggle.addEventListener(\"click\", ()=>{\n                const theme = toggle.getAttribute(\"data-bs-theme-value\");\n                setStoredTheme(theme);\n                setTheme(theme);\n                showActiveTheme(theme, true);\n            });\n        });\n    });\n})();\n\n\n//# sourceMappingURL=404.5b2f7b90.js.map\n","/*!\n * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)\n * Copyright 2011-2023 The Bootstrap Authors\n * Licensed under the Creative Commons Attribution 3.0 Unported License.\n */\n\n(() => {\n    'use strict'\n\n    const getStoredTheme = () => localStorage.getItem('theme')\n    const setStoredTheme = theme => localStorage.setItem('theme', theme)\n\n    const getPreferredTheme = () => {\n        const storedTheme = getStoredTheme()\n        if (storedTheme) {\n            return storedTheme\n        }\n\n        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n    }\n\n    const setTheme = theme => {\n        if (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            document.documentElement.setAttribute('data-bs-theme', 'dark')\n        } else {\n            document.documentElement.setAttribute('data-bs-theme', theme)\n        }\n    }\n\n    setTheme(getPreferredTheme())\n\n    const showActiveTheme = (theme, focus = false) => {\n        const themeSwitcher = document.querySelector('#bd-theme')\n\n        if (!themeSwitcher) {\n            return\n        }\n\n        const themeSwitcherText = document.querySelector('#bd-theme-text')\n        const activeThemeIcon = document.querySelector('.theme-icon-active')\n        const btnToActive = document.querySelector(`[data-bs-theme-value=\"${theme}\"]`)\n\n        document.querySelectorAll('[data-bs-theme-value]').forEach(element => {\n            element.classList.remove('active')\n            element.setAttribute('aria-pressed', 'false')\n        })\n\n        document.querySelectorAll('.theme-check').forEach(element => {\n            element.classList.add('d-none')\n        });\n\n        btnToActive.querySelector('.theme-check').classList.remove('d-none')\n\n        if (activeThemeIcon.classList.contains('bi-circle-half')) {\n            activeThemeIcon.classList.remove('bi-circle-half')\n        }\n        if (activeThemeIcon.classList.contains('bi-sun-fill')) {\n            activeThemeIcon.classList.remove('bi-sun-fill')\n        }\n        if (activeThemeIcon.classList.contains('bi-moon-stars-fill')) {\n            activeThemeIcon.classList.remove('bi-moon-stars-fill')\n        }\n        activeThemeIcon.classList.add(\n            theme === 'light' ? 'bi-sun-fill' : theme === 'dark' ? 'bi-moon-stars-fill' : 'bi-circle-half'\n        )\n\n        btnToActive.classList.add('active')\n        btnToActive.setAttribute('aria-pressed', 'true')\n        const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`\n        themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)\n\n        if (focus) {\n            themeSwitcher.focus()\n        }\n    }\n\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n        const storedTheme = getStoredTheme()\n        if (storedTheme !== 'light' && storedTheme !== 'dark') {\n            setTheme(getPreferredTheme())\n        }\n    })\n\n    window.addEventListener('DOMContentLoaded', () => {\n        showActiveTheme(getPreferredTheme())\n\n        document.querySelectorAll('[data-bs-theme-value]')\n            .forEach(toggle => {\n                toggle.addEventListener('click', () => {\n                    const theme = toggle.getAttribute('data-bs-theme-value')\n                    setStoredTheme(theme)\n                    setTheme(theme)\n                    showActiveTheme(theme, true)\n                })\n            })\n    })\n})()"],"names":["getStoredTheme","localStorage","getItem","setStoredTheme","theme","setItem","getPreferredTheme","window","matchMedia","matches","setTheme","document","documentElement","setAttribute","showActiveTheme","focus","themeSwitcher","querySelector","themeSwitcherText","activeThemeIcon","btnToActive","querySelectorAll","forEach","element","classList","remove","add","contains","themeSwitcherLabel","textContent","dataset","bsThemeValue","addEventListener","storedTheme","toggle","getAttribute"],"version":3,"file":"404.5b2f7b90.js.map"}